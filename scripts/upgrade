#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu
#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
# Set app specific variables
app=$YNH_APP_INSTANCE_NAME

# Check destination directory
DESTDIR="/var/www/$app"
[[ ! -d $DESTDIR ]] && ynh_die \
"The destination directory '$DESTDIR' does not exist.\
 The app is not correctly installed, you should remove it first."

# Retrieve arguments
domain=$(ynh_app_setting_get "$app" domain)
path_url=$(ynh_app_setting_get "$app" path_url)
is_public=$(ynh_app_setting_get "$app" is_public)
# Compatibility with previous version
if [ -z "$path_url" ] ; then
  path_url=$(ynh_app_setting_get "$app" path)
  ynh_app_setting_set $app path_url "$path_url"
fi
path_url=$(ynh_normalize_url_path $path_url)
db_pwd=$(ynh_app_setting_get "$app" mysqlpwd)
deskey=$(ynh_app_setting_get "$app" deskey)
final_path=$(ynh_app_setting_get "$app" final_path)
# Compatibility with previous version
if [ -z "$final_path" ] ; then
  final_path="/var/www/$app"
  ynh_app_setting_set $app final_path "$final_path"
fi

db_name=$(ynh_app_setting_get "$app" db_name)
# Compatibility with previous version
if [ -z "$db_name" ] ; then
  db_name=$app
  ynh_app_setting_set "$app" db_name "$db_name"
fi
db_user="$db_name"

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Use prior backup and restore on error only if backup feature
# exists on installed instance
ynh_backup_before_upgrade # Backup the current version of the app
ynh_clean_setup () {
    ynh_restore_upgradebackup
}
ynh_abort_if_errors	# Stop script if an error is detected

#=================================================
# CHECK CURRENT PILEA VERSION
#=================================================

version=`cd $final_path && bin/console pilea:version 2> /dev/null || printf '0.2'`

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_php --phpversion=7.2

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Create tmp directory and fetch app inside
TMPDIR=$(mktemp -d)
ynh_setup_source "$TMPDIR"

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_system_user_create $app # Create dedicated user if not existing

#=================================================
# NGINX CONFIGURATION
#=================================================

ynh_add_nginx_config
if [ "$path_url" = "/" ]
then
  # Replace "//" location (due to nginx template)
  # Prevent from replacing in "http://" expressions by excluding ":" as preceding character
  sed --in-place "s@\([^:]\)//@\1/@g" /etc/nginx/conf.d/$domain.d/$app.conf
else
  # Move prefix comment #for-subdir at end of lines
  sed --in-place "s/#for-subdir\(.*\)/\1 #for-subdir/g" /etc/nginx/conf.d/$domain.d/$app.conf
fi
ynh_store_file_checksum "/etc/nginx/conf.d/$domain.d/$app.conf"


#=================================================
# PHP-FPM CONFIGURATION
#=================================================.

# If we upgrade from version 0.2, delete php7.0 config
if [ "$version" = "0.2" ]
then
  ynh_remove_fpm_config
fi

# Copy and set php-fpm7.2 configuration
ynh_add_fpm7.2_config


#=================================================
# SETUP SSOWAT
#=================================================

# Make app public if necessary
if [ $is_public -eq 1 ]
then
  ynh_app_setting_set $app skipped_uris "/"
fi

#=================================================
# SPECIFIC SETUP
#=================================================
# UPDATE DEPENDENCIES WITH COMPOSER
#=================================================

# Check if dependencies need to be updated with composer
if [ -f "${TMPDIR}/composer.phar" ]; then
  exec_composer "${TMPDIR}" install
else
  init_composer "${TMPDIR}"
fi

#=================================================
# CONFIGURE & UPDATE PILEA
#=================================================

# Copy and set Pilea dist configuration
pilea_conf="${TMPDIR}/.env"
cp ../conf/.env $pilea_conf

ynh_replace_string "database_name" "${db_name}" "$pilea_conf"
ynh_replace_string "database_user" "${db_user}" "$pilea_conf"
ynh_replace_string "database_password" "${db_pwd}" "$pilea_conf"
ynh_replace_string "app_secret" "${deskey}" "$pilea_conf"

# Replace files and set permissions
ynh_secure_remove "${final_path}"
cp -a $TMPDIR/. "${final_path}"
chown -R $app: "${final_path}"
chmod 755 $final_path

# Install dependencies and Pilea
exec_console $app "$final_path" cache:clear
exec_console $app "$final_path" doctrine:migrations:migrate -n

# Set up cron job
cron_path="/etc/cron.d/$app"
cp -a ../conf/pilea.cron "$cron_path"
chown root: "$cron_path"
chmod 644 "$cron_path"

ynh_replace_string "#USER#" "$app" "$cron_path"
ynh_replace_string "#DESTDIR#" "$final_path" "$cron_path"

#=================================================
# RELOAD NGINX AND FPM
#=================================================
systemctl restart php7.2-fpm
systemctl reload nginx

# If we upgrade from version 0.2, reload php7.0
if [ "$version" = "0.2" ]
then
  systemctl restart php5-fpm
fi
